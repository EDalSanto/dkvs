#!/Users/Me/.rbenv/versions/2.5.3/bin/ruby

require "pry"

puts "dkvs client initiated"
puts "usage GET: GET key"
puts "usage SET: SET key=value"

file_store = File.open("./store", "a+") # append / read
# init file with serialized content
if file_store.size == 0 # empty
  init_data = Marshal.dump({})
  file_store.write(init_data)
  file_store.rewind
end
# REPL loop
while true
  # load store into memory
  file_contents = file_store.read
  file_store.rewind
  # deserialize
  memory_store = Marshal.load(file_contents)
  puts "------------------------"
  print "input: "
  input = $stdin.gets.chomp
  command, args = input.split
  case command
  when "GET"
    # search for in-memory buffer than file
    key = args
    print "output: #{memory_store[key].inspect}\n"
  when "SET"
    # try to load key from buffer than file
    key, value = args.split("=")
    if memory_store[key] = value
      puts "Stored successful!"
    else
      puts "Could not save #{input.inspect}"
    end
    # flush store
    File.write("./store", Marshal.dump(memory_store))
  when "EXIT"
    break
  else
    puts "invalid input"
    puts "usage GET: GET key"
    puts "usage SET: SET key=value"
  end
end

# TODO: flush buffer periodically
